{"version":3,"sources":["assets\\framework\\on\\mEventMgr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import mEvent from \"./mEvent\";\nconst TAG = 'mEventMgr.ts';\nclass mEventMgr {\n    private static _Instance: mEventMgr = null;\n    static getInstance() {\n        if (mEventMgr._Instance == null) {\n            mEventMgr._Instance = new mEventMgr();\n        }\n        return mEventMgr._Instance;\n    }\n    /** 事件Item */\n    private _eventList: Map<string, Array<mEvent>> = null;\n    /** 构造函数 */\n    constructor() {\n        this._eventList = new Map<string, Array<mEvent>>();\n    }\n    /**\n     * 自定义一个事件监听\n     * @param eventName 事件名称\n     * @param callback 事件回调\n     * @param target 监听对象\n     * @returns \n     */\n    public on(eventName: string, callback: Function, target: any) {\n        // 获取事件监听集合\n        let array: Array<mEvent> = this._eventList.get(eventName);\n        if (!array) {\n            array = new Array<mEvent>();\n        } else {\n            // 检查队列中是否存在相同监听\n            for (let i = 0; i < array.length; i++) {\n                const element = array[i];\n                if (element.callback === callback && element.target === target) {\n                    console.log(TAG, '已存在相同的监听事件');\n                    return;\n                }\n            }\n        }\n        // 添加一个事件到派送队列\n        const data = new mEvent();\n        data.name = eventName;\n        data.callback = callback;\n        data.target = target;\n        array.push(data);\n        this._eventList.set(eventName, array);\n    }\n    /**\n     * 取消一个事件的监听\n     * @param eventName 事件名称\n     * @param callback 事件回调\n     * @param target 监听对象\n     * @returns void\n     */\n    public off(eventName: string, callback: Function, target: any) {\n        let array: Array<mEvent> = this._eventList.get(eventName);\n        if (!array) {\n            console.log(TAG, '事件队列为空');\n            return;\n        } else {\n            for (let i = array.length - 1; i >= 0; i--) {\n                const element = array[i];\n                if (element.callback === callback && element.target === target) {\n                    array.splice(i, 1);\n                    console.log('release event:' + eventName);\n                }\n            }\n        }\n    }\n    /**\n     * 派送指定事件\n     * @param eventName 事件名称\n     * @param args 事件派送时传递的参数\n     */\n    public emit(eventName: string, ...args: any) {\n        let array: Array<mEvent> = this._eventList.get(eventName);\n        if (!array) {\n            console.log(TAG, `没有相关监听事件:${eventName}`);\n            return;\n        } else {\n            for (let i = array.length - 1; i >= 0; i--) {\n                const element = array[i];\n                if (element.callback && element.target) {\n                    element.callback.apply(element.target, args);\n                }\n            }\n        }\n    }\n}\n/** 输出一个事件管理器 */\nexport const mEMgr = mEventMgr.getInstance();\n"]}