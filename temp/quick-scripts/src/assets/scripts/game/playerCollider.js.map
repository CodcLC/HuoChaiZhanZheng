{"version":3,"sources":["assets\\scripts\\game\\playerCollider.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,wEAAwE;AACxE,mBAAmB;AACnB,kFAAkF;AAClF,8BAA8B;AAC9B,kFAAkF;;;;;;;;;;;;;;;;;;;;;AAElF,uDAAkD;AAE5C,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAA4C,kCAAY;IAAxD;QAAA,qEAwCC;QAtCG,sBAAgB,GAAkB,IAAI,CAAC;QAEvC,cAAQ,GAAS,KAAK,CAAC;;QA6BvB,oBAAoB;QACpB,sDAAsD;QACtD,IAAI;QAEJ,mBAAmB;QACnB,uDAAuD;QACvD,IAAI;IACR,CAAC;IAlCG,+BAAM,GAAN;QACI,IAAI,CAAC,gBAAgB,GAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,0BAAgB,CAAC,CAAC;IACnE,CAAC;IAED,oBAAoB;IACpB,uCAAc,GAAd,UAAgB,OAAyB,EAAC,YAA+B,EAAC,aAAgC;QACtG,IAAI,KAAK,GAAC,aAAa,CAAC,IAAI,CAAC;QAC7B,kDAAkD;QAClD,qCAAqC;QACrC,IAAI,KAAK,CAAC,KAAK,IAAI,QAAQ,EAAE;YACzB,IAAI,CAAC,QAAQ,GAAC,KAAK,CAAC;YACpB,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC;SACxC;aAAK,IAAG,KAAK,CAAC,KAAK,IAAE,MAAM,EAAC;YACzB,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SAC1B;IACL,CAAC;IAED,oBAAoB;IACpB,qCAAY,GAAZ,UAAc,OAAyB,EAAC,YAA+B,EAAC,aAAgC;QACpG,IAAI,KAAK,GAAC,aAAa,CAAC,IAAI,CAAC;QAC7B,kDAAkD;QAClD,qCAAqC;QACrC,IAAI,KAAK,CAAC,KAAK,IAAI,QAAQ,EAAE;YACzB,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC;SACtB;IACL,CAAC;IA/BgB,cAAc;QADlC,OAAO;OACa,cAAc,CAwClC;IAAD,qBAAC;CAxCD,AAwCC,CAxC2C,EAAE,CAAC,SAAS,GAwCvD;kBAxCoB,cAAc","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport playerController from \"./playerController\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class playerCollider extends cc.Component {\n\n    playerController:playerController=null;\n\n    isFlying:boolean=false;\n\n    onLoad () {\n        this.playerController=this.node.getComponent(playerController);\n    }\n\n    // 只在两个碰撞体开始接触时被调用一次\n    onBeginContact (contact:cc.PhysicsContact,selfCollider:cc.PhysicsCollider,otherCollider:cc.PhysicsCollider) {\n        let other=otherCollider.node;\n        // let worldManifold = contact.getWorldManifold();\n        // let normal = worldManifold.normal;\n        if (other.group == \"ground\") {\n            this.isFlying=false;\n            this.playerController.dropToGround();\n        }else if(other.group==\"wall\"){\n            contact.setFriction(0);\n        }\n    }\n\n    // 只在两个碰撞体结束接触时被调用一次\n    onEndContact (contact:cc.PhysicsContact,selfCollider:cc.PhysicsCollider,otherCollider:cc.PhysicsCollider) {\n        let other=otherCollider.node;\n        // let worldManifold = contact.getWorldManifold();\n        // let normal = worldManifold.normal;\n        if (other.group == \"ground\") {\n            this.isFlying=true;\n        }\n    }\n\n    // 每次将要处理碰撞体接触逻辑时被调用\n    // onPreSolve (contact, selfCollider, otherCollider) {\n    // }\n\n    // 每次处理完碰撞体接触逻辑时被调用\n    // onPostSolve (contact, selfCollider, otherCollider) {\n    // }\n}\n"]}